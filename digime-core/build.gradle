/*
 * Copyright (c) 2009-2018 digi.me Limited. All rights reserved.
 */

apply plugin: 'com.android.library'
apply from: project.file('../config/gradle/quality.gradle')
apply from: project.file('../config/gradle/import.gradle')

android {
    compileSdkVersion buildConfig.compileSdk
    buildToolsVersion buildConfig.buildTools

    defaultConfig {
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode 1
        versionName readVersion()
        consumerProguardFiles 'proguard-rules.pro'
    }
    
    buildTypes {
        debug {
            buildConfigField "String", "BASE_HOST",  "\"${exports.globalEndpoint}\""
            buildConfigField "boolean", "LOG_REQUESTS",  "true"
        }

        release {
            buildConfigField "String", "BASE_HOST", "\"${exports.globalEndpoint}\""
            buildConfigField "boolean", "LOG_REQUESTS",  "false"
        }
    }

    lintOptions {
        lintConfig project.file('../gradle/lint.xml')
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "digime-core-${version}.aar"
            println 'OutputFile : ' + outputFileName
        }
    }
}

Object readVersion() {
    def versionClass = file('src/main/java/me/digi/sdk/core/DigiMeSDKVersion.java')
    def outVersion = null
    versionClass.eachLine{
        def regex = (it =~ /(?:.*VERSION = \")(.*)(?:\".*)/)
        if (regex.matches()) {
            outVersion = regex[0][1]
        }
    }
    return outVersion
}

task updateVersion {
    project.version = null
    def ver = readVersion()
    project.version = ver
    project.ext.globalVersion = ver
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

task updateReadmeVersion {
    if (project.version.contains("SNAPSHOT"))
        return
    def readmeFile = file('../README.md')
    StringBuilder outContent = new StringBuilder()
    boolean shouldWrite = false
    readmeFile.eachLine {
        def regex = (it =~ /(?:.*me.digi.sdk:digime-core:)(.*)(?:\'.*)/)
        if (regex.matches() && !project.version.equals(regex[0][1])) {
            shouldWrite = true
            outContent.append(it.replace(regex[0][1], project.version)).append("\n")
        } else {
            outContent.append(it).append("\n")
        }
    }
    if (shouldWrite) {
        readmeFile.write(outContent.toString().trim(), "UTF-8")
    }
}

updateReadmeVersion.dependsOn(updateVersion)
build.dependsOn(updateVersion)

dependencies {
    implementation project(path: ':digime-crypto')

    implementation "com.android.support:support-annotations:$versions.supportLibrary"

    implementation "com.google.code.gson:gson:$versions.gson"

    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"

    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$versions.okhttp"

    testImplementation "junit:junit:$versions.junit"
    testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
}

apply from: project.file('../config/gradle/publishing.gradle')
